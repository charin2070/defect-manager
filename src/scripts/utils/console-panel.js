class ConsolePanel {
    constructor() {
        this.panel = document.createElement('div');
        // Add class
        this.panel.className = 'console-panel';
        this.panel.style.position = 'fixed';
        this.panel.style.bottom = '0';
        this.panel.style.left = '0';
        this.panel.style.width = '100%';
        this.panel.style.backgroundColor = 'rgba(51, 51, 51, 0.2)'; // –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω
        this.panel.style.color = '#fff';
        this.panel.style.zIndex = '10000';
        this.panel.style.borderTop = '2px solid rgba(51, 51, 51, 0.2)';
        this.panel.style.padding = '10px';
        this.panel.style.boxSizing = 'border-box';
        this.panel.style.maxHeight = '40vh';
        this.panel.style.overflowY = 'auto';
        this.panel.style.backdropFilter = 'blur(10px)'; // –†–∞–∑–º—ã—Ç–∏–µ –∑–∞–¥–Ω–∏–∫–∞

        const header = document.createElement('div');
        header.style.display = 'flex';
        header.style.justifyContent = 'space-between';
        header.style.alignItems = 'center';
        header.style.marginBottom = '5px';

        const minimizeButton = document.createElement('button');
        minimizeButton.textContent = '–°–≤–µ—Ä–Ω—É—Ç—å';
        minimizeButton.style.marginRight = '5px';
        minimizeButton.onclick = () => this.toggleMinimize();

        const closeButton = document.createElement('button');
        closeButton.textContent = '–ó–∞–∫—Ä—ã—Ç—å';
        closeButton.onclick = () => this.closePanel();

        header.appendChild(minimizeButton);
        header.appendChild(closeButton);
        this.panel.appendChild(header);

        this.contentContainer = document.createElement('div');
        this.panel.appendChild(this.contentContainer);

        document.body.appendChild(this.panel);

        this.hookConsoleMethods();
        this.hookWindowErrors();
    }

    hookConsoleMethods() {
        const consoleMethods = ['log', 'warn', 'error', 'info'];
        consoleMethods.forEach(method => {
            const originalMethod = console[method];
            console[method] = (...args) => {
                this.consoleMethod = method;
                this.consoleArgs = args;

                this.displayLog(method, args);
                originalMethod.apply(console, args);
            };
        });
    }

    hookWindowErrors() {
        window.addEventListener('error', (event) => {
            const stackTrace = event.error ? event.error.stack : 'No stack trace available';
            // this.consoleError = "No error";

            this.displayLog('error', [`${event.message}\n${stackTrace}`]);
            this.displaySuggestion(event.message, event);
        });

        window.addEventListener('unhandledrejection', (event) => {
            const stackTrace = event.reason && event.reason.stack ? event.reason.stack : 'No stack trace available';
            this.displayLog('error', [`Unhandled Promise Rejection: ${event.reason}\n${stackTrace}`]);
            this.displaySuggestion(event.reason.toString(), event);
        });
    }

    showFunctionCode(functionName) {
        const code = document.createElement('pre');
        code.style.whiteSpace = 'pre-wrap';
        code.textContent = functionName;
        this.contentContainer.appendChild(code);
    }

    displayLog(type, args) {
      const logItem = document.createElement('div');
      logItem.classList.add('log-item');
      logItem.style.marginBottom = '5px';
      logItem.style.backdropFilter = 'blur(10px)';
      logItem.style.backgroundColor = 'rgba(51, 51, 51, 0.2)';
      logItem.style.padding = '5px';
      logItem.style.borderRadius = '3px';
      logItem.style.position = 'relative';
      logItem.style.borderRadius = '10px';

      switch (type) {
          case 'log':
              logItem.style.backgroundColor = 'rgba(73, 73, 73, 0.2)';
              break;
          case 'warn':
              logItem.style.backgroundColor = '#d79e00b2';
              break;
          case 'error':
              logItem.style.backgroundColor = '#a1121256';
              logItem.classList.add('log', 'error-log');
              break;
          case 'info':
              logItem.style.backgroundColor = '#5bc0de';
              break;
      }

      const excludeList = [
          '[Five Server] connecting...',
          '[Five Server] connected.',
      ];

      args.forEach((arg) => {
          if (arg === undefined || arg === null) return;
          if (excludeList.some((item) => arg.toString().includes(item))) {
              return;
          }

          const pre = document.createElement('pre');
          pre.style.whiteSpace = 'pre-wrap';
          pre.style.margin = '0';

          if (typeof arg === 'string') {
              pre.innerHTML = arg.includes('%c') ? `<span style="${args[1]}">${arg.replace('%c', '')}</span>` : arg;
          } else if (typeof arg === 'function') {
              this.showFunctionCode(arg.toString());
              return;
          } else if (typeof arg === 'object') {
              // –ö—Ä–∞—Å–∏–≤–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç
              pre.innerHTML = this.formatObject(arg);
          } else {
              pre.innerHTML = JSON.stringify(arg, null, 2);
          }

          logItem.appendChild(pre);
      });

      const copyButton = document.createElement('button');
      copyButton.textContent = ' ';
      copyButton.style.position = 'absolute';
      copyButton.style.top = '5px';
      copyButton.style.right = '5px';
      copyButton.style.backgroundColor = 'transparent';
      copyButton.style.border = 'none';
      copyButton.style.cursor = 'pointer';
      copyButton.style.color = '#fff';
      copyButton.onclick = () => this.copyToClipboard(logItem.textContent);

      logItem.appendChild(copyButton);
      this.contentContainer.appendChild(logItem);
      this.panel.scrollTop = this.panel.scrollHeight;
  }

  formatObject(obj) {
      let formattedHtml = '';
      if (Array.isArray(obj)) {
          formattedHtml += '<span style="color: #d79e00;">[</span>';
          obj.forEach((item, index) => {
              formattedHtml += `<div style="margin-left: 10px;">${index}: ${this.formatValue(item)}</div>`;
          });
          formattedHtml += '<span style="color: #d79e00;">]</span>';
      } else if (obj !== null && typeof obj === 'object') {
          formattedHtml += '<span style="color: #00aaff;">{</span>';
          for (let key in obj) {
              if (obj.hasOwnProperty(key)) {
                  formattedHtml += `<div style="margin-left: 10px;"><span style="color: #e74c3c;">${key}</span>: ${this.formatValue(obj[key])}</div>`;
              }
          }
          formattedHtml += '<span style="color: #00aaff;">}</span>';
      } else {
          formattedHtml = this.formatValue(obj);
      }

      return formattedHtml;
  }

  formatValue(value) {
      if (typeof value === 'string') {
          return `<span style="color: #ecf0f1;">"${value}"</span>`;
      } else if (typeof value === 'number') {
          return `<span style="color: #f39c12;">${value}</span>`;
      } else if (typeof value === 'boolean') {
          return `<span style="color: #2ecc71;">${value}</span>`;
      } else if (value === null) {
          return '<span style="color: #7f8c8d;">null</span>';
      } else if (Array.isArray(value)) {
          return '[Array]';
      } else if (typeof value === 'object') {
          return '[Object]';
      } else {
          return value;
      }
  }


    displaySuggestion(message, event) {
        const suggestionItem = document.createElement('div');
        suggestionItem.style.marginTop = '10px';
        suggestionItem.style.padding = '5px';
        // suggestionItem.style.backgroundColor = '#222';
        suggestionItem.style.backgroundColor = 'rgba(182, 182, 182, 0.26)';
        suggestionItem.style.borderRadius = '10px';
        suggestionItem.style.borderLeft = '4px solid #5bc0de';

        let suggestionText = 'üí°';

        // Type error
        if (message.includes('TypeError')) {
            const functionName = this.extractFunctionName(message);
            const propertyName = this.extractPropertyName(message);
            suggestionText += `<strong>${functionName}</strong> –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É '${propertyName}'.<br>`;
            suggestionText += 'üí°–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ–±—ä–µ–∫—Ç –ø–µ—Ä–µ–¥ –æ–±—Ä–∞—â–µ–Ω–∏–µ–º –∫ –µ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞–º.';
          } else if (message.includes('Cannot read properties of undefined')) {
            const functionName = this.extractFunctionName(message);
            const propertyName = this.extractPropertyName(message);
            suggestionText += `<strong>${functionName}</strong> –ø—ã—Ç–∞–µ—Ç—Å—è —Å—á–∏—Ç–∞—Ç—å —Å–≤–æ–π—Å—Ç–≤–æ '${propertyName}' —Å undefined.<br>`;
            suggestionText += '–í–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –æ–±—ä–µ–∫—Ç –Ω–µ —Ä–∞–≤–µ–Ω undefined –ø–µ—Ä–µ–¥ –æ–±—Ä–∞—â–µ–Ω–∏–µ–º –∫ –µ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞–º.';
          } else if (message.includes('Cannot read property')) {
            const functionName = this.extractFunctionName(message);
            const propertyName = this.extractPropertyName(message);
            suggestionText += `<strong>${functionName}</strong> –ø—ã—Ç–∞–µ—Ç—Å—è —Å—á–∏—Ç–∞—Ç—å —Å–≤–æ–π—Å—Ç–≤–æ '${propertyName}' —Å null –∏–ª–∏ undefined.<br>`;
            suggestionText += '–í–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –æ–±—ä–µ–∫—Ç –Ω–µ —Ä–∞–≤–µ–Ω null –∏–ª–∏ undefined –ø–µ—Ä–µ–¥ –æ–±—Ä–∞—â–µ–Ω–∏–µ–º –∫ –µ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞–º.';
          } else if (message.includes('ReferenceError')) {
            suggestionText += '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω—ã –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º.';
        } else if (message.includes('SyntaxError')) {
          suggestionText += '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞, –≤–∫–ª—é—á–∞—è –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Å–∫–æ–±–∫–∏, –∫–∞–≤—ã—á–∫–∏ –∏ –∑–∞–ø—è—Ç—ã–µ.';
        } else if (message.includes('RangeError')) {
          suggestionText += '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –º–∞—Å—Å–∏–≤–∞–º–∏ –∏–ª–∏ —Ä–µ–∫—É—Ä—Å–∏–µ–π).';
        } else if (message.includes('Uncaught Error')) {
          suggestionText += '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ª–∏ –±–ª–æ–∫–∏ try-catch.';
          suggestionText += '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –æ–±—ä–µ–∫—Ç, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –∏–¥–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–µ, –Ω–µ —Ä–∞–≤–µ–Ω null –∏–ª–∏ undefined.';
        } else if (message.includes('Unexpected token')) {
          suggestionText += '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–π –≤ –∫–æ–¥–µ.';
        } else if (message.includes('is not a function')) {
          suggestionText += '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —è–≤–ª—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π.';
        } else if (message.includes('out of memory')) {
          suggestionText += '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ –¥–∞–Ω–Ω—ã—Ö.';
        } else if (message.includes('stack overflow')) {
          suggestionText += '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–µ—Ç –ª–∏ –≤ –∫–æ–¥–µ —Å–ª–∏—à–∫–æ–º –≥–ª—É–±–æ–∫–æ–π —Ä–µ–∫—É—Ä—Å–∏–∏.';
        } else if (message.includes('failed to fetch')) {
          suggestionText += '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ URL –∑–∞–ø—Ä–æ—Å–∞ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –∏ —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω.';
        } else if (message.includes('NetworkError')) {
          suggestionText += '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞.';
        } else if (message.includes('Access-Control-Allow-Origin')) {
          suggestionText += '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ —Å–µ—Ä–≤–µ—Ä CORS –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–∏.';
        } else if (message.includes('Invalid or unexpected token')) {
          suggestionText += '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –∏ –∫–æ–¥–∏—Ä–æ–≤–∫—É —Ñ–∞–π–ª–æ–≤.';
        } else if (message.includes('Invalid JSON')) {
          suggestionText += '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö JSON –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –µ–≥–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã.';
        } else if (message.includes('permission denied')) {
          suggestionText += '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∏–º–µ—é—Ç—Å—è –ª–∏ —É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞.';
        } else if (message.includes('Failed to execute')) {
          suggestionText += '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.';
        } else if (message.includes('Cannot set property')) {
          suggestionText += '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –æ–±—ä–µ–∫—Ç –Ω–µ —Ä–∞–≤–µ–Ω null –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –µ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞.';
        } else if (message.includes('XHR failed')) {
          suggestionText += '–£–±–µ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ URL –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö CORS.';
        } else if (message.includes('DOMException')) {
          suggestionText += '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–µ –Ω–∞—Ä—É—à–∞—é—Ç—Å—è –ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ DOM (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–æ—Å—Ç—É–ø –∫ –∫—Ä–æ—Å—Å-–¥–æ–º–µ–Ω–Ω–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É).';
        } else if (message.includes('QuotaExceededError')) {
          suggestionText += '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ª–∏–º–∏—Ç —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Local Storage.';
        } else if (message.includes('TimeoutError')) {
          suggestionText += '–£–≤–µ–ª–∏—á—å—Ç–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω—è–µ–º—É—é –æ–ø–µ—Ä–∞—Ü–∏—é.';
        } else if (message.includes('Unexpected end of input')) {
          suggestionText += '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –ª–∏ –≤–Ω–µ–∑–∞–ø–Ω–æ –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, JSON).';
        } else if (message.includes('Element is not clickable')) {
          suggestionText += '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∫–ª–∏–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ –ø–µ—Ä–µ–∫—Ä—ã—Ç –¥—Ä—É–≥–∏–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏).';
        } else if (message.includes('AbortError')) {
          suggestionText += '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–µ –±—ã–ª –ª–∏ –ø—Ä–µ—Ä–≤–∞–Ω –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–ª–∏ —Å–∏—Å—Ç–µ–º–æ–π.';
        } else if (message.includes('SyntaxError: Unexpected end of JSON input')) {
          suggestionText += '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å JSON –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞.';
        } else if (message.includes('Event listener failed')) {
          suggestionText += '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.';
        } else if (message.includes('UnhandledPromiseRejectionWarning')) {
          suggestionText += '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .catch() –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ –ø—Ä–æ–º–∏—Å–∞—Ö.';
        } else if (message.includes('Failed to load resource')) {
          suggestionText += '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —Ä–µ—Å—É—Ä—Å –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏.';
        } else if (message.includes('Unexpected reserved word')) {
          suggestionText += '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ª–∏ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö.';
        } else if (message.includes('Not allowed to load local resource')) {
          suggestionText += '–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –±—Ä–∞—É–∑–µ—Ä–∞.';
        } else if (message.includes('TypeError: Assignment to constant variable')) {
          suggestionText += '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–µ –ø—ã—Ç–∞–µ—Ç–µ—Å—å –ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π, –æ–±—ä—è–≤–ª–µ–Ω–Ω–æ–π —á–µ—Ä–µ–∑ const.';
          suggestionText += '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –æ–±—ä–µ–∫—Ç–∞ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞—â–µ–Ω–∏–µ–º –∫ –µ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞–º.';
        } else if (message.includes('Invalid Date')) {
          suggestionText += '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã –∏ –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è.';
        } else if (message.includes('Cannot redefine property')) {
          suggestionText += '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–µ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç–µ –ª–∏ —Å–≤–æ–π—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑.';
        } else if (message.includes('Invalid regular expression')) {
          suggestionText += '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è.';
        } else if (message.includes('Script error.')) {
          suggestionText += '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–µ—Ç –ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ –∏–∑ –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.';
        } else if (message.includes('ReferenceError: navigator is not defined')) {
          suggestionText += '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ª–∏ –æ–±—ä–µ–∫—Ç navigator –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞.';
        } else if (message.includes('TypeError: Reduce of empty array with no initial value')) {
          suggestionText += '–ü–µ—Ä–µ–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–µ—Ç–æ–¥–∞ .reduce() –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –º–∞—Å—Å–∏–≤ –Ω–∞ –ø—É—Å—Ç–æ—Ç—É.';
        } else if (message.includes('FetchError')) {
          suggestionText += '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å URL –∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞.';
        } else if (message.includes('SyntaxError: Unexpected string')) {
          suggestionText += '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏ –∫–∞–≤—ã—á–µ–∫.';
        } else if (message.includes('WebSocket is already in CLOSING or CLOSED state')) {
          suggestionText += '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ WebSocket –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –¥–∞–Ω–Ω—ã—Ö.';
        } else if (message.includes('Failed to execute \'appendChild\'')) {
          suggestionText += '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —ç–ª–µ–º–µ–Ω—Ç, –≤ –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –≤—Å—Ç–∞–≤–∏—Ç—å –¥–æ—á–µ—Ä–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç.';
        } else {
          suggestionText += '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–±—â–∏–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∏ –ª–æ–≥–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–¥–∞.';
        }

        suggestionItem.innerHTML = suggestionText;
        this.contentContainer.appendChild(suggestionItem);
    }

    copyToClipboard(text) {
        navigator.clipboard.writeText(text).then(() => {
            // console.log('–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
        }, (err) => {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏: ', err);
        });
    }

    toggleMinimize() {
        this.panel.style.display = this.panel.style.display === 'none' ? 'block' : 'none';
    }

    closePanel() {
        this.panel.remove();
    }

    extractFunctionName(message) {
        // Get current error
        // const error = this.consoleError;
        // log(thiserror);

        // const match = (new Error()).stack.match(/at (.*?)\(/);
        return this.consoleMethod ? this.consoleMethod : this.consoleMethod;
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –∏–º–µ–Ω–µ–º functionName
    getFunctionCode(functionName) {
        const code = document.createElement('pre');
        code.style.whiteSpace = 'pre-wrap';
        code.textContent = functionName;
        this.contentContainer.appendChild(code);
        return code.textContent;
        // code.remove(); // –£–¥–∞–ª—è–µ–º –∫–æ–¥ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
   
    }

   renderObject(obj) {
      // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ–±—ä–µ–∫—Ç–∞
      const container = document.createElement('div');
      container.style.paddingLeft = '10px';
      
      if (obj && typeof obj === 'object') {
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–∞
        for (const [key, value] of Object.entries(obj)) {
          const item = document.createElement('div');
          item.style.marginBottom = '5px';
          item.style.fontFamily = 'Arial, sans-serif';
          
          // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ - —ç—Ç–æ –æ–±—ä–µ–∫—Ç, —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º renderObject
          if (value && typeof value === 'object') {
            item.innerHTML = `<strong>${key}:</strong> {`;
            const nestedContainer = renderObject(value); // –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤
            nestedContainer.style.marginLeft = '15px'; // –û—Ç—Å—Ç—É–ø –¥–ª—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
            item.appendChild(nestedContainer);
            item.innerHTML += '}';
          } else {
            item.innerHTML = `<strong>${key}:</strong> ${JSON.stringify(value)}`;
          }
          
          container.appendChild(item);
        }
      } else {
        container.innerHTML = '<strong>Empty or invalid object</strong>';
      }
    
      return container;
   }
  

    extractPropertyName(message) {
        const match = message.match(/reading '([^']+)'/);
        return match ? match[1] : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ';
    }
}
